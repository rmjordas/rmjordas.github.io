{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack:///./node_modules/date-fns/esm/toDate/index.js","webpack:///./node_modules/date-fns/esm/compareAsc/index.js","webpack:///./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack:///./node_modules/date-fns/esm/differenceInMonths/index.js","webpack:///./node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/differenceInSeconds/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/index.js","webpack:///./node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack:///./node_modules/date-fns/esm/_lib/assign/index.js","webpack:///./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/formatDistance/index.js","webpack:///./node_modules/date-fns/esm/isValid/index.js","webpack:///./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack:///./node_modules/date-fns/esm/addMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/subMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack:///./node_modules/date-fns/esm/format/index.js","webpack:///./node_modules/date-fns/esm/parseISO/index.js","webpack:///./src/devlog-template-meta.tsx","webpack:///./node_modules/date-fns/esm/differenceInDays/index.js","webpack:///./node_modules/date-fns/esm/formatDistanceToNow/index.js","webpack:///./node_modules/date-fns/esm/differenceInMinutes/index.js","webpack:///./src/devlog-template.tsx","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.reflect.construct.js"],"names":["MDXRenderer","require","module","React","useMDXComponents","mdx","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","compareAsc","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","diff","differenceInCalendarMonths","yearDiff","getFullYear","monthDiff","getMonth","differenceInMonths","sign","difference","Math","abs","setMonth","isLastMonthNotFull","result","differenceInMilliseconds","differenceInSeconds","floor","ceil","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","dirtyOptions","options","width","String","defaultWidth","formats","date","full","medium","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","dirtyIndex","valuesArray","context","formattingValues","defaultFormattingWidth","_defaultWidth","_width","argumentCallback","ordinalNumber","dirtyNumber","_dirtyOptions","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn","dirtyString","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","value","matchedString","parsePatterns","defaultParseWidth","array","predicate","findIndex","pattern","test","object","hasOwnProperty","findKey","valueCallback","rest","slice","code","formatDistance","token","count","replace","addSuffix","comparison","formatLong","formatRelative","_date","_baseDate","_options","localize","parsePattern","parseInt","parseResult","any","index","weekStartsOn","firstWeekContainsDate","cloneObject","dirtyObject","target","property","getDateMillisecondsPart","getTimezoneOffsetInMilliseconds","dirtyDate","baseTimezoneOffset","getTimezoneOffset","setSeconds","dirtyBaseDate","locale","RangeError","isNaN","localizeOptions","Boolean","months","seconds","offsetInSeconds","minutes","round","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","isValid","toInteger","addMilliseconds","dirtyAmount","timestamp","amount","subMilliseconds","addLeadingZeros","targetLength","output","y","signedYear","getUTCFullYear","year","M","getUTCMonth","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","pow","startOfUTCISOWeek","getUTCDay","setUTCDate","setUTCHours","getUTCISOWeekYear","fourthOfJanuaryOfNextYear","setUTCFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","fourthOfJanuary","startOfUTCWeek","localeWeekStartsOn","defaultWeekStartsOn","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","dayPeriodEnum","formatTimezoneShort","offset","dirtyDelimiter","absOffset","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","G","unit","lightFormatters","Y","signedWeekYear","weekYear","R","u","Q","q","L","w","week","getUTCWeek","I","isoWeek","getUTCISOWeek","D","dayOfYear","setUTCMonth","startOfYearTimestamp","getUTCDayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","b","B","K","k","X","_localize","timezoneOffset","_originalDate","x","O","z","t","originalDate","T","dateLongFormatter","timeLongFormatter","p","P","dateTimeFormat","datePattern","timePattern","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","cleanEscapedString","input","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","additionalDigits","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","parseTime","setFullYear","parseTimezone","dateString","timeString","split","substr","exec","regex","RegExp","captures","century","isWeekDate","parseDateUnit","_year","validateWeekDate","isoWeekYear","fourthOfJanuaryDay","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","parseTimeUnit","validateTime","parseFloat","timezoneString","_hours","validateTimezone","formatDate","differenceInDays","now","formatDistanceToNow","dirtyFormatStr","formatStr","utcDate","formatterOptions","map","substring","firstCharacter","longFormatter","join","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","format","DevlogTemplateMeta","updated","parsedDate","parsedUpdated","isUpdatedRecently","differenceInMinutes","query","DevlogTemplate","data","devlog","title","image","slug","body","sharp","fixed","src","urlSlug","css","rhythm","fluid","alt","to","$export","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","Target","newTarget","$args","push","apply","proto","instance","Function"],"mappings":"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","file":"component---src-devlog-template-tsx-fea75607a345cc3c358f.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarMonths from '../differenceInCalendarMonths/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * var result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import \"core-js/modules/es6.regexp.replace\";\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  \"long\": 'MMMM do, y',\n  medium: 'MMM d, y',\n  \"short\": 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  \"long\": 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  \"short\": 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  \"long\": \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  \"short\": '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nexport default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","import \"core-js/modules/es6.number.constructor\";\nimport buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  \"short\": ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function argumentCallback(quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.regexp.match\";\nexport default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  \"short\": /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function valueCallback(value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function valueCallback(index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import \"core-js/modules/es6.regexp.match\";\nexport default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import assign from '../assign/index.js';\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","import compareAsc from '../compareAsc/index.js';\nimport differenceInMonths from '../differenceInMonths/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport toDate from '../toDate/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","import \"core-js/modules/es6.number.constructor\";\nexport default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nexport default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function M(date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function d(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function a(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function H(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function m(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function s(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import lightFormatters from '../lightFormatters/index.js';\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js';\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js';\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js';\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js';\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport addLeadingZeros from '../../addLeadingZeros/index.js';\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function G(date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function y(date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function Y(date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function R(date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function u(date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function Q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function M(date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function L(date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function w(date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function I(date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function d(date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function D(date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function E(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function e(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function c(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function i(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function a(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function b(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function B(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function H(date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function K(date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function k(date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function m(date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function s(date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function X(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function x(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function O(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function z(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function t(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function T(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\n\nfunction dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","import \"core-js/modules/es6.array.index-of\";\nvar protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token) {\n  if (token === 'YYYY') {\n    throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'YY') {\n    throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'D') {\n    throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr');\n  } else if (token === 'DD') {\n    throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr');\n  }\n}","import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.array.map\";\nimport isValid from '../isValid/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/formatters/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport {\n  formatDistanceToNow,\n  differenceInMinutes,\n  differenceInDays,\n  format,\n  parseISO,\n} from 'date-fns';\nimport { FC } from 'react';\n\nimport { Devlog } from './devlog-template';\n\ntype DevlogTemplateMetaProps = Pick<Devlog, 'date' | 'updated'>;\n\nconst formatDate = (date: Date) => {\n  return differenceInDays(new Date(), date) < 31\n    ? formatDistanceToNow(date, { addSuffix: true })\n    : format(date, 'PPP');\n};\n\nconst DevlogTemplateMeta: FC<DevlogTemplateMetaProps> = ({ date, updated }) => {\n  const parsedDate = parseISO(date);\n  const parsedUpdated = parseISO(updated);\n  const isUpdatedRecently = differenceInMinutes(parsedUpdated, parsedDate) <= 30;\n\n  return (\n    <p>\n      <small>\n        Posted {formatDate(parsedDate)}{' '}\n        {isUpdatedRecently ? null : `(updated ${formatDate(parsedUpdated)})`}\n      </small>\n    </p>\n  );\n};\n\nexport default DevlogTemplateMeta;\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between the given dates.\n * This function returns the difference in days as an integer whole number of 24 hour periods between two timestamps,  and thereby ignores DST changes.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n */\n\nvar MILLISECONDS_IN_DAY = 86400000;\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var result = (dateLeft - dateRight) / MILLISECONDS_IN_DAY; // round towards zero\n\n  if (result > 0) return Math.floor(result);\n  return Math.ceil(result);\n}","import \"core-js/modules/es6.date.now\";\nimport distanceInWords from '../formatDistance/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *   ```\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistanceToNow(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), dirtyOptions);\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * var result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are from 10:01:59 to 10:00:00\n * var result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Link, graphql } from 'gatsby';\nimport Img, { FluidObject, FixedObject } from 'gatsby-image';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport { FC } from 'react';\n\nimport DevlogTemplateMeta from './devlog-template-meta';\nimport Layout from './layout';\nimport Seo from './seo';\nimport { rhythm } from './styles/typography';\n\ntype HeroImage = {\n  sharp: {\n    fluid: FluidObject;\n    fixed: FixedObject;\n  };\n};\n\nexport type Devlog = {\n  body: string;\n  title: string;\n  author: string;\n  image: HeroImage;\n  slug: string;\n  date: string;\n  updated: string;\n};\n\ntype DevlogTemplateProps = { data: { devlog: Devlog } };\n\nexport const query = graphql`\n  query($pageID: String!) {\n    devlog(id: { eq: $pageID }) {\n      body\n      title\n      slug\n      author\n      date\n      updated\n      image {\n        sharp: childImageSharp {\n          fixed {\n            ...GatsbyImageSharpFixed\n          }\n          fluid(maxWidth: 700, maxHeight: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst DevlogTemplate: FC<DevlogTemplateProps> = ({ data }) => {\n  const { title, image, slug, body, date, updated } = data.devlog;\n\n  return (\n    <Layout>\n      <Seo title={title} image={image.sharp.fixed.src} urlSlug={slug} />\n\n      <article>\n        <h1>{title}</h1>\n\n        <DevlogTemplateMeta date={date} updated={updated} />\n\n        <Img\n          css={css`\n            margin-bottom: ${rhythm(1)};\n            box-shadow: 0 0 6px rgba(0, 0, 0, 0.11), 0 0 0 1px rgba(0, 0, 0, 0.05);\n            border-radius: 3px;\n          `}\n          fluid={image.sharp.fluid}\n          alt={title}\n        />\n\n        <MDXRenderer>{body}</MDXRenderer>\n      </article>\n\n      <Link\n        css={css`\n          display: inline-block;\n        `}\n        to=\"/\"\n      >\n        &larr; back to home\n      </Link>\n    </Layout>\n  );\n};\n\nexport default DevlogTemplate;\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n"],"sourceRoot":""}